package telegram_bot

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/tnqbao/financial_management_bot/config/gemini_api"
	"gorm.io/gorm"
)

type CustomDateRange struct {
	DateStart string `json:"dateStart"`
	DateEnd   string `json:"dateEnd"`
}

type APIResponse struct {
	Type      string `json:"type"`
	Period    string `json:"period,omitempty"`
	DateStart string `json:"dateStart,omitempty"`
	DateEnd   string `json:"dateEnd,omitempty"`
	Error     string `json:"error,omitempty"`
}

func normalizeMessage(input string) string {
	input = strings.ToLower(strings.TrimSpace(input))
	input = strings.ReplaceAll(input, "\n", " ")
	return input
}

func HandleCommand(ctx context.Context, bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	messageText := normalizeMessage(update.Message.Text)

	db, ok := ctx.Value("db").(*gorm.DB)
	if !ok || db == nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu"))
		return
	}
	loc := time.FixedZone("Asia/Ho_Chi_Minh", 7*60*60)
	now := time.Now().In(loc)
	aiClient := gemini_api.NewAIClient()
	prompt := fmt.Sprintf(`
  X√°c ƒë·ªãnh lo·∫°i l·ªánh t·ª´ tin nh·∫Øn ng∆∞·ªùi d√πng. N·∫øu tin nh·∫Øn thu·ªôc m·ªôt trong c√°c lo·∫°i sau:
  - T·ªïng chi ti√™u ng√†y => Tr·∫£ v·ªÅ: { "type": "sum", "period": "day" }
  - T·ªïng chi ti√™u tu·∫ßn => Tr·∫£ v·ªÅ: { "type": "sum", "period": "week" }
  - T·ªïng chi ti√™u th√°ng => Tr·∫£ v·ªÅ: { "type": "sum", "period": "month" }
  - T·ªïng chi ti√™u nƒÉm => Tr·∫£ v·ªÅ: { "type": "sum", "period": "year" }
  - T·ªïng chi ti√™u c√≥ ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c => Tr·∫£ v·ªÅ: { "type": "custom", "dateStart": "YYYY-MM-DD", "dateEnd": "YYYY-MM-DD" }
  - Tin nh·∫Øn k√®m gi√° ti·ªÅn ho·∫∑c m√¥ ta => Tr·∫£ v·ªÅ: { "type": "other" }
  üö´ L∆∞u √Ω:
  - Ch·ªâ in ƒë√∫ng m·ªôt gi√° tr·ªã trong 5 gi√° tr·ªã tr√™n, kh√¥ng th√™m b·∫•t c·ª© k√Ω t·ª± hay vƒÉn b·∫£n n√†o kh√°c.
  - N·∫øu tin nh·∫Øn kh√¥ng thu·ªôc b·∫•t k·ª≥ lo·∫°i n√†o tr√™n, ch·ªâ in: { "type": "other" }
  - N·∫øu l√† l·ªánh !custom, tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON v·ªõi 2 tr∆∞·ªùng 'dateStart' v√† 'dateEnd' (YYYY-MM-DD)

  üîπ Tin nh·∫Øn: "%s"
  * Ng√†y hi·ªán t·∫°i: %s
`, messageText, now.Format("2006-01-02"))

	detectCase, err := aiClient.GetResponse(prompt)
	if err != nil {
		log.Printf("‚ùå L·ªói khi g·ªçi AI: %v", err)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ö† L·ªói x·ª≠ l√Ω tin nh·∫Øn, vui l√≤ng th·ª≠ l·∫°i sau."))
		return
	}
	detectCase = strings.TrimSpace(detectCase)
	detectCase = strings.Trim(detectCase, "```json")
	detectCase = strings.Trim(detectCase, "```")
	detectCase = strings.Trim(detectCase, "`")
	fmt.Println(detectCase)
	var apiResponse APIResponse
	err = json.Unmarshal([]byte(detectCase), &apiResponse)
	if err != nil {
		log.Printf("‚ùå L·ªói khi ph√¢n t√≠ch JSON: %v", err)
		apiResponse = APIResponse{
			Error: "L·ªói trong c√∫ ph√°p tin nh·∫Øn t·ª´ AI, vui l√≤ng th·ª≠ l·∫°i.",
		}
	}

	if apiResponse.Error != "" {
		responseJSON, _ := json.Marshal(apiResponse)
		bot.Send(tgbotapi.NewMessage(chatID, string(responseJSON)))
		return
	}

	switch apiResponse.Type {
	case "sum":
		switch apiResponse.Period {
		case "day":
			HandleSumReport(ctx, bot, chatID, "day", "", "")
		case "month":
			HandleSumReport(ctx, bot, chatID, "month", "", "")
		case "week":
			HandleSumReport(ctx, bot, chatID, "week", "", "")
		case "year":
			HandleSumReport(ctx, bot, chatID, "year", "", "")
		default:
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö† L·ªánh t·ªïng chi ti√™u kh√¥ng h·ª£p l·ªá"))
		}
	case "custom":
		if apiResponse.DateStart != "" && apiResponse.DateEnd != "" {
			HandleSumReport(ctx, bot, chatID, "custom", apiResponse.DateStart, apiResponse.DateEnd)
		} else {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö† L·ªánh t√πy ch·ªânh thi·∫øu th√¥ng tin ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c"))
		}
	case "other":
		HandlePaymentMessage(ctx, bot, messageText, chatID)
	default:
		log.Printf("‚ö† AI tr·∫£ v·ªÅ k·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá: %s", apiResponse.Type)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ö† T√¥i l√† tr·ª£ th·ªß qu·∫£n l√Ω chi ti√™u, ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!"))
	}
}
